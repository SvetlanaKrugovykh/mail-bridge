const { buttonsConfig } = require('../data/keyboard')
require('dotenv').config()
const { inputLineScene } = require('./inputLine')
const GROUP_ID = Number(process.env.GROUP_ID)
const SENDER = process.env.SENDER

async function mailComposeForm(bot, msg, webAppUrl) {
  const chatId = msg.chat.id
  const fromList = ["example1@mail.com", "example2@mail.com"]
  const toList = ["recipient1@mail.com", "recipient2@mail.com"]
  const fromListParam = encodeURIComponent(JSON.stringify(fromList))
  const toListParam = encodeURIComponent(JSON.stringify(toList))
  const url = `${webAppUrl}/mail-form/?fromList=${fromListParam}&toList=${toListParam}`

  await bot.sendMessage(chatId, 'A button will appear below, fill out the form', {
    reply_markup: {
      keyboard: [
        [{ text: 'üì© Compose the mail', web_app: { url } }],
        [{ text: 'üè†', callback_data: '0_4' }]
      ],
      resize_keyboard: true
    }
  })
}

async function usersTextInput(bot, msg, menuItem, selectedByUser) {
  try {
    const txtCommand = await inputLineScene(bot, msg)
    if (menuItem === '0_10') {
      if (!/^[^\s@]+@(lotok\.in\.ua|ito\.in\.ua)$/.test(txtCommand)) {
        await bot.sendMessage(msg.chat.id, '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç <b>email</b>. –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ\n', { parse_mode: 'HTML' })
        return selectedByUser
      }
      bot.sendMessage(msg.chat.id, '–ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –º–µ–Ω—é —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å <b>–í–≤–µ—Å—Ç–∏ –ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º`—è</b>\n', { parse_mode: 'HTML' })
      selectedByUser = { ...selectedByUser, userEmail: txtCommand }
    } else if (menuItem === '0_11') {
      if (txtCommand.length < 5) {
        await bot.sendMessage(msg.chat.id, '–ù–µ–∑—Ä–æ–∑—É–º—ñ–ª–µ –≤–≤–µ–¥–µ–Ω–Ω—è <b>–ü—Ä—ñ–∑–≤–∏—â–∞ —Ç–∞ —ñ–º`—è</b>. –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ\n', { parse_mode: 'HTML' })
        return selectedByUser
      }
      await bot.sendMessage(msg.chat.id, '–ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –º–µ–Ω—é —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å <b>–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É</b>\n', { parse_mode: 'HTML' })
      selectedByUser = { ...selectedByUser, userPIB: txtCommand }
    } else if (menuItem === '0_12') {
      const newtxtCommand = txtCommand.replace(/\D/g, '')
      if (!/^\d{7,12}$/.test(newtxtCommand)) {
        await bot.sendMessage(msg.chat.id, '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç <b>–ù–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—É</b>. –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ\n', { parse_mode: 'HTML' })
        return selectedByUser
      }
      if (selectedByUser?.userEmail) await bot.sendMessage(msg.chat.id, '–ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –º–µ–Ω—é —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å <b>–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</b>\n', { parse_mode: 'HTML' })
      selectedByUser = { ...selectedByUser, userPhoneNumber: newtxtCommand }
      if (!selectedByUser?.userEmail) {
        await bot.sendMessage(msg.chat.id, '–ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –º–µ–Ω—é —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å <b>–í–≤–µ—Å—Ç–∏ email</b>\n', { parse_mode: 'HTML' })
      }
    }
    return selectedByUser
  } catch (err) {
    console.log(err)
    return selectedByUser
  }
}

async function mailCompose(bot, msg, selectedByUser) {
  try {
    if (!selectedByUser?.userEmail) {
      await bot.sendMessage(msg.chat.id, '–ù–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ Email. –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ\n', { parse_mode: 'HTML' })
      return
    }
    if (!selectedByUser?.userPIB) {
      await bot.sendMessage(msg.chat.id, '–ù–µ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º`—è. –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ\n', { parse_mode: 'HTML' })
      return
    }
    if (!selectedByUser?.userPhoneNumber) {
      await bot.sendMessage(msg.chat.id, '–ù–µ –∑–∞–ø–æ–≤–Ω–µ–Ω –µ—Ä–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ\n', { parse_mode: 'HTML' })
      return
    }

    const data = {
      email: selectedByUser?.userEmail,
      PIB: selectedByUser?.userPIB,
      phoneNumber: selectedByUser?.userPhoneNumber,
      contract: '',
      address: '',
    }

    console.log(data)
    await singUpDataSave(bot, msg.chat.id, data)
  } catch (err) {
    console.log(err)
  }
}

module.exports = { mailComposeForm, usersTextInput, mailCompose }


