require('dotenv').config()
const { inputLineScene, inputLineAdminScene } = require('../controllers/inputLine')
const { buttonsConfig } = require('../data/keyboard')
const GROUP_ID = Number(process.env.GROUP_ID)
const { globalBuffer, selectedByUser } = require('../../globalBuffer')

async function actionsOnId(bot, msg, inputLine) {
  if (inputLine !== undefined) {
    if (inputLine.includes('id#')) {
      let id = inputLine.split('id#')[1]
      let msgtext = inputLine.split('id#')[2]
      console.log('id', id)
      console.log('msgtext', msgtext)
      try {
        await bot.sendMessage(id, `–î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è, –≤—ñ–¥–ø–æ–≤—ñ–¥—å: \n ${msgtext}`, { parse_mode: 'HTML' })
        await bot.sendMessage(msg.chat.id, `ü•éü•é id# request sent\n`, { parse_mode: 'HTML' })
      } catch (err) {
        console.log(err)
      }
    }
  }
}

module.exports.clientsAdmin = async function (bot, msg) {
  await module.exports.menuStarter(bot, msg)
}

module.exports.menuStarter = async function (bot, msg, lang = 'pl') {
  await module.exports.sendstarterButtons(bot, msg, lang)
  console.log(((new Date()).toLocaleTimeString()))
}

module.exports.sendstarterButtons = async function (bot, msg) {
  const { title, buttons } = buttonsConfig["starterButtons"]
  const lang = selectedByUser[msg.chat.id]?.language || 'pl'
  await bot.sendMessage(msg.chat.id, title[lang], {
    reply_markup: {
      keyboard: buttons[lang],
      resize_keyboard: true
    }
  })
}

//#region clientAdminSubMenus
module.exports.clientsAdminResponseToRequest = async function (bot, msg) {
  await bot.sendMessage(msg.chat.id, '–í–≤–µ–¥—ñ—Ç—å <i>id —á–∞—Ç–∞ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–ª—ñ—î–Ω—Ç—É </i>\n', { parse_mode: 'HTML' })
  const codeChat = await inputLineScene(bot, msg)
  if (codeChat.length < 7) {
    await bot.sendMessage(msg.chat.id, 'Wrong id. –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ\n', { parse_mode: 'HTML' })
    return null
  }
  const commandHtmlText = '–í–≤–µ–¥—ñ—Ç—å <i>text –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–ª—ñ—î–Ω—Ç—É </i>\n'
  await bot.sendMessage(msg.chat.id, commandHtmlText, { parse_mode: 'HTML' })
  const txtCommand = await inputLineScene(bot, msg)
  if (txtCommand.length < 7) {
    await bot.sendMessage(msg.chat.id, '–ù–µ–∑—Ä–æ–∑—É–º—ñ–ª–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ\n', { parse_mode: 'HTML' })
    return null
  }
  const txtCommandForSend = 'id#' + codeChat + 'id#' + txtCommand
  await actionsOnId(bot, msg, txtCommandForSend)
}

//#endregion

